#include <iostream>
#include <array>
#include <vector>
#include <algorithm>
#include "menu1.h"
#include "menu2.h"
#include "showMan.h"
#include "wordChooser.h"
#include "GameHandler.h"
#include "displayHandler.h"
#include <ncurses.h>
using namespace std;

int main() {
    initscr();
    resize_term(30, 100);
    int maxY, maxX;
    getmaxyx(stdscr, maxY, maxX); 
    int startY = 2; 
    int startX = maxX / 2 - 5; ; 
    Menu menu;
    int cntNext = menu.runMenu();
    clear();
    string b;
    Menu2 menu2;
    if (cntNext == 0) {
        menu2.runMenu2(); 
        WordChooser chooser;
        b = chooser.getRandomWord(cntNext);
        }
    else b = menu2.InputWord();
    
    int err = 1;

    array<bool, 26> alph = {};
    vector<char> word(b.size(), '*');
    
    int cnt = 0;
    int flag3 = 1;

    GameHandler gameHandler(word, alph, b, err);
    DisplayHandler displayHandler(startY, startX);

    clear();
    showMan obj;
    obj.printMan(0);

    while (err < 9 && flag3 != 0) {
        if (cnt == 0) {
            for (int i = 0; i < alph.size(); i++) {
                if (alph[i] == true) mvprintw(startY + 18, startX - 6 + i, " ");
                else mvprintw(startY + 18, startX - 6 + i, "%c", static_cast<char>(i + 97));
            }
            for (int i = 0; i < word.size(); i++) 
                mvprintw(startY + 20, startX + i, "*"); flag3++; 
            mvprintw(startY + 21, startX, "errors: 0/8\n");
        }

        cnt++;
        
        flag3 = 0;
        char temp;
        mvprintw(startY + 22, startX, "enter char\n");
        temp = getch();  
        clear();

        showMan obj;
        obj.printMan(err);

        gameHandler.processInput(temp);
        
        // for (int i = 0; i < alph.size(); i++) {
        //     if (alph[i] || static_cast<char>(i + 97) == temp) mvprintw(startY + 18, startX - 6 + i, " ");
        //     else mvprintw(startY + 18, startX - 6 + i, "%c", static_cast<char>(i + 97));
        // }
        // for (int i = 0; i < word.size(); i++) {
        //     if (word[i] != '*') mvprintw(startY + 20, startX + i, "%c", word[i]);
        //     else { mvprintw(startY + 20, startX + i, "*"); flag3++; }
        // }

        // mvprintw(startY + 21, startX, "errors: %d/8\n", err - 1);

        displayHandler.displayAlphabet(alph, temp);
        displayHandler.displayWord(word);
        displayHandler.displayErrors(err - 1);

        flag3 = std::count(word.begin(), word.end(), '*');
    }

    if (flag3 == 0) { 
        mvprintw(startY + 23, startX, "you guessed the word");
        mvprintw(startY + 24, startX, "enter any button to quit");
        getch();  
    } else  { 
        mvprintw(startY + 23, startX, "you lost the game\n");
        mvprintw(startY + 24, startX, "enter any button to quit");
        getch();
    }
    
    endwin();

    return 0;
}
